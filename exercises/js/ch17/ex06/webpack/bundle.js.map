{"version":3,"file":"bundle.js","mappings":"mBACO,MAAMA,EAAa,GASnB,SAASC,EAAWC,EAAKC,GAC9B,IAAK,IAAIC,EAAM,EAAGA,ECVA,GDUYA,IAC5B,IAAK,IAAIC,EAAM,EAAGA,ECVF,GDUcA,IAAO,CACnC,MAAMC,EAAOH,EAAKC,GAAKC,GACvBH,EAAIK,YACJL,EAAIM,KAAKH,EAAML,EAAYI,EAAMJ,EAAYA,EAAYA,GACzDE,EAAIO,UAAYH,EAAO,QAAU,QACjCJ,EAAIQ,OACJR,EAAIS,QACN,CAEJ,CElBA,MAAMC,EAASC,SAASC,cAAc,WAChCZ,EAAMU,EAAOG,WAAW,MACxBC,EAAcH,SAASC,cAAc,UACrCG,EAAcJ,SAASC,cAAc,UAE3CF,EAAOM,MAAQC,IACfP,EAAOQ,OAASC,IAGhB,IAAIC,EAAc,KAGlB,MAAMC,EAAQ,IAAIC,MAAM,kBAGxB,IAAIrB,EAAO,IAAIsB,MDjBK,ICkBjBf,KAAK,MACLgB,KAAI,IACH,IAAID,MDnBY,ICmBAf,KAAK,MAAMgB,KAAI,MAAQC,KAAKC,MAAsB,EAAhBD,KAAKE,cAmF3D,SAASC,IACP3B,EDhGK,SAAoBA,GAEzB,MAAM4B,EAAW5B,EAAKuB,KAAKM,GAAQ,IAAIA,KAEvC,IAAK,IAAI5B,EAAM,EAAGA,EAZA,GAYYA,IAC5B,IAAK,IAAIC,EAAM,EAAGA,EAZF,GAYcA,IAAO,CAInC,IAAI4B,EAAkB,EAGJ,CAChB,EAAE,GAAI,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GACxB,CAAC,GAAI,GAAc,CAAC,EAAG,GACvB,CAAC,GAAI,GAAK,CAAC,EAAG,GAAK,CAAC,EAAG,IAIfC,SAAQ,EAAEC,EAAIC,MACtB,MAAMC,EAAIjC,EAAM+B,EACVG,EAAIjC,EAAM+B,EAGZC,GAAK,GAAKA,EAhCF,IAgCcC,GAAK,GAAKA,EA/BxB,KAgCVL,GAAmB9B,EAAKkC,GAAGC,GAAK,EAAI,EACtC,IAIF,MAAMC,EAAUpC,EAAKC,GAAKC,GAGtBkC,IAAYN,EAAkB,GAAKA,EAAkB,GACvDF,EAAS3B,GAAKC,IAAO,EACXkC,GAA+B,IAApBN,IACrBF,EAAS3B,GAAKC,IAAO,EAGzB,CAEF,OAAO0B,CACT,CCsDSS,CAAWrC,GAClBF,EAAWC,EAAKC,GAChBmB,EAAcmB,sBAAsBX,EACtC,CAlBAlB,EAAO8B,iBAAiB,SAAS,SAAUC,GACzC,MAAMnC,EAAOI,EAAOgC,wBACdC,EAAWF,EAAIG,QAAUtC,EAAKuC,KAA9BF,EAAuCF,EAAIK,QAAUxC,EAAKyC,IAE1D7C,EAAMuB,KAAKC,MAAMiB,EAAQ7C,GACzBK,EAAMsB,KAAKC,MAAMiB,EAAQ7C,GAC/BG,EAAKC,GAAKC,IAAQF,EAAKC,GAAKC,GAC5BkB,EAAM2B,YAAYC,OAClBlD,EAAWC,EAAKC,EAClB,IAWAa,EAAY0B,iBAAiB,SAAS,KAEhCpB,GAGJQ,GAAQ,IAGVb,EAAYyB,iBAAiB,SAAS,KAE/BpB,IAGL8B,qBAAqB9B,GACrBA,EAAc,KAAI,IAGpBrB,EAAWC,EAAKC,E","sources":["webpack://ch17/./ex06/renderGrid.js","webpack://ch17/./ex06/updateGrid.js","webpack://ch17/./ex06/index.js"],"sourcesContent":["// 1セルのサイズ\r\nexport const RESOLUTION = 10;\r\n\r\nimport { ROWS, COLS } from './updateGrid.js';\r\n\r\n/**\r\n * grid を canvas に描画する\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {Array<Array<boolean>>} grid\r\n */\r\nexport function renderGrid(ctx, grid) {\r\n  for (let row = 0; row < ROWS; row++) {\r\n    for (let col = 0; col < COLS; col++) {\r\n      const cell = grid[row][col];\r\n      ctx.beginPath();\r\n      ctx.rect(col * RESOLUTION, row * RESOLUTION, RESOLUTION, RESOLUTION);\r\n      ctx.fillStyle = cell ? 'black' : 'white';\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    }\r\n  }\r\n}\r\n","// 50 x 50 の盤面とする\r\nexport const ROWS = 50;\r\nexport const COLS = 50;\r\n\r\n/**\r\n * Life Game のルールに従ってセルを更新する\r\n * @param {Array<Array<boolean>>} grid\r\n * @returns {Array<Array<boolean>>}\r\n */\r\nexport function updateGrid(grid) {\r\n  // 新しいグリッドを作成\r\n  const nextGrid = grid.map((arr) => [...arr]);\r\n\r\n  for (let row = 0; row < ROWS; row++) {\r\n    for (let col = 0; col < COLS; col++) {\r\n      // 周囲のセルの生存数を数えて nextGrid[row][col] に true or false を設定する\r\n\r\n      // 周囲のセルの生存数の合計\r\n      let livingNeighbors = 0;\r\n\r\n      // 8つの近隣セルの座標\r\n      const neighbors = [\r\n        [-1, -1], [-1, 0], [-1, 1],\r\n        [0, -1],           [0, 1],\r\n        [1, -1],  [1, 0],  [1, 1],\r\n      ];\r\n\r\n      // 8つの隣接するセルを調べる\r\n      neighbors.forEach(([dx, dy]) => {\r\n        const x = row + dx;\r\n        const y = col + dy;\r\n\r\n        // グリッドの範囲内であるかをチェック\r\n        if (x >= 0 && x < ROWS && y >= 0 && y < COLS) {\r\n          livingNeighbors += grid[x][y] ? 1 : 0;\r\n        }\r\n      });\r\n\r\n      // 更新するセルの現在の状態\r\n      const isAlive = grid[row][col];\r\n\r\n      // ゲームのルールに従って次の状態を決定\r\n      if (isAlive && (livingNeighbors < 2 || livingNeighbors > 3)) {\r\n        nextGrid[row][col] = false;\r\n      } else if (!isAlive && livingNeighbors === 3) {\r\n        nextGrid[row][col] = true;\r\n      }\r\n      // その他の場合は状態を維持\r\n    }\r\n  }\r\n  return nextGrid;\r\n}\r\n","import { renderGrid, RESOLUTION } from './renderGrid.js';\nimport { updateGrid, ROWS, COLS } from './updateGrid.js';\n\nconst canvas = document.querySelector(\"#screen\");\nconst ctx = canvas.getContext(\"2d\");\nconst startButton = document.querySelector(\"#start\");\nconst pauseButton = document.querySelector(\"#pause\");\n\ncanvas.width = ROWS * RESOLUTION;\ncanvas.height = COLS * RESOLUTION;\n\n// https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame が返す ID\nlet animationId = null;\n\n// NOTE: download from https://soundeffect-lab.info/sound/button/mp3/decision1.mp3\nconst sound = new Audio(\"/decision1.mp3\");\n\n// ライフゲームのセル (true or false) をランダムに初期化する\nlet grid = new Array(ROWS)\n  .fill(null)\n  .map(() =>\n    new Array(COLS).fill(null).map(() => !!Math.floor(Math.random() * 2))\n  );\n\n// // grid を canvas に描画する\n// function renderGrid(grid) {\n//   for (let row = 0; row < ROWS; row++) {\n//     for (let col = 0; col < COLS; col++) {\n//       const cell = grid[row][col];\n//       ctx.beginPath();\n//       ctx.rect(col * RESOLUTION, row * RESOLUTION, RESOLUTION, RESOLUTION);\n//       ctx.fillStyle = cell ? \"black\" : \"white\";\n//       ctx.fill();\n//       ctx.stroke();\n//     }\n//   }\n// }\n\n// // Life Game のルールに従ってセルを更新する\n// function updateGrid(grid) {\n//   // 新しいグリッドを作成\n//   const nextGrid = grid.map((arr) => [...arr]);\n\n//   for (let row = 0; row < ROWS; row++) {\n//     for (let col = 0; col < COLS; col++) {\n//       // 周囲のセルの生存数を数えて nextGrid[row][col] に true or false を設定する (実装してね)\n//       //-----実装部分開始位置\n\n//       // 周囲のセルの生存数の合計\n//       let livingNeighbors = 0;\n\n//       // 8つの近隣セルの座標\n//       const neighbors = [\n//         [-1, -1], [-1, 0], [-1, 1],\n//         [ 0, -1],          [ 0, 1],\n//         [ 1, -1], [ 1, 0], [ 1, 1]\n//       ];\n\n//       //8つの隣接するセルを調べて、生存していたら(trueなら)livingNeighborsに1を足す\n//       neighbors.forEach(([dx, dy]) => {\n//         const x = row + dx;\n//         const y = col + dy;\n        \n//         // グリッドの範囲内であるかをチェック\n//         if (x >= 0 && x < ROWS && y >= 0 && y < COLS) {\n//           livingNeighbors += grid[x][y] ? 1 : 0;\n//         }\n//       });\n\n//       // 更新するセルの現在の状態\n//       const isAlive = grid[row][col];\n\n//       // ゲームのルールに従って次の状態を決定\n//       // 「自身が生きていて周りに生きている細胞が1つもない」or「自身が生きていて4つ以上生きている細胞がある」ときは死ぬ\n//       if (isAlive && (livingNeighbors < 2 || livingNeighbors > 3)) {\n//         nextGrid[row][col] = false;\n//       } \n//       // 「自身が死んでいて周りに丁度3つの生きている細胞がある」ときは誕生する\n//       else if (!isAlive && livingNeighbors === 3) {\n//         nextGrid[row][col] = true;\n//       }\n//       //その他の場合は細胞の死や誕生に影響しない\n\n//       //-----実装部分終了位置\n//     }\n//   }\n//   return nextGrid;\n// }\n\n// canvas がクリックされたときの処理 (セルの値を反転する)\ncanvas.addEventListener('click', function (evt) {\n  const rect = canvas.getBoundingClientRect();\n  const pos = { x: evt.clientX - rect.left, y: evt.clientY - rect.top };\n\n  const row = Math.floor(pos.y / RESOLUTION);\n  const col = Math.floor(pos.x / RESOLUTION);\n  grid[row][col] = !grid[row][col];\n  sound.cloneNode().play();\n  renderGrid(ctx, grid);\n});\n\n// requestAnimationFrame によって一定間隔で更新・描画を行う\n// NOTE: リフレッシュレートの高い画面では速く実行される (これを防ぐ場合は下記の例を参照)\n// https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame\nfunction update() {\n  grid = updateGrid(grid);\n  renderGrid(ctx, grid);\n  animationId = requestAnimationFrame(update);\n}\n\nstartButton.addEventListener(\"click\", () => {\n  // 既にアニメーションが動いている場合は何もしない\n  if (animationId) {\n    return;\n  }\n  update();\n});\n\npauseButton.addEventListener(\"click\", () => {\n  // アニメーションが停止している場合は何もしない\n  if (!animationId) {\n    return;\n  }\n  cancelAnimationFrame(animationId);\n  animationId = null;\n});\n\nrenderGrid(ctx, grid);\n"],"names":["RESOLUTION","renderGrid","ctx","grid","row","col","cell","beginPath","rect","fillStyle","fill","stroke","canvas","document","querySelector","getContext","startButton","pauseButton","width","ROWS","height","COLS","animationId","sound","Audio","Array","map","Math","floor","random","update","nextGrid","arr","livingNeighbors","forEach","dx","dy","x","y","isAlive","updateGrid","requestAnimationFrame","addEventListener","evt","getBoundingClientRect","pos","clientX","left","clientY","top","cloneNode","play","cancelAnimationFrame"],"sourceRoot":""}