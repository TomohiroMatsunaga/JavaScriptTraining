【目的】
コードの見た目を自動で整えるPrittierと記述間違いを警告してくれるESLintを設定し、実行すること

【手順】
①必要なモジュールをインストールする
インストールコマンド
npm install eslint@8.50.0 prettier eslint-config-google --save-dev
--save-devをつけることによってこのモジュールは開発時のみ利用すると宣言する。
（本番環境でロードされないようにするため）
eslint@8.50.0で明示的に@8.50.0を選択しているのは、v9以降では記述方法が異なり、
node_module内のファイルとの互換性が無く、エラーが出たため。

インストールしているもの
・eslint：記述間違いを警告してくれる
・prettier：コードの見た目を自動でととのえる

②package.jsonにPrittierとESLintの設定を書く

{
  "scripts": {
    "lint": "eslint . --ext .js --ignore-pattern 'format_sample.js'",
    "prettier:check": "prettier --check .",
    "prettier:fix": "prettier --write .",
    "prettier:check-fix": "prettier --check . && prettier --write ."
  }
}

説明
--ext .js：すべてのJSファイルをESLintの対象にしている
--ignore-pattern 'format_sample.js'：format_sample.jsをESLintの対象外にしている
prettier --check .：フォーマット違反を警告表示する
prettier --write .：フォーマット違反を自動修正
prettier:check-fix：警告表示と自動修正を同時に実行する

③ESLint の設定ファイルを作成
.eslintrc.json を作成し、以下の内容を記述
{
  "extends": ["google"]
}
説明
extends：
	google：Google のスタイルガイドに従う
	prettier：Prettier と競合する ESLint のルールを無効化

②Prettierの設定ファイルの作成
Google のスタイルガイドの内容を記述した.prettierrc を作成する
（一部だけ記述した）
{
  "printWidth": 80,
  "tabWidth": 2,
  "singleQuote": true,
  "trailingComma": "none",
  "bracketSpacing": true,
  "arrowParens": "avoid"
}


③PrittierとESLintの実行
ESLint の実行コマンド
npm run lint
Prettier の実行コマンド
npm run prettier:check-fix
（子ディレクトリまで波及する）